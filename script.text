// ****************************************************************************
// <p>Title: PDF Remove White Border</p>
// <p>Description: Destructively removes the White Border from raw borne digital PDFs with GhostScript (slowly)</p>
// <p>Author: jharris</p>
// <p>Tooltip: Since this script is executed on the local machine, Ghostscript must be installed</p>
//
// ****************************************************************************


// *** Problem categories ***
//var problemMap = window.getNewProblemMap();


Packages.com.iarchives.jobq.db.DBImage.flushCache();
pipeline = db.getPipeline();
stages = pipeline.getAllStages();

for (i = 0; i < containers.length; i++) {

    if (containers.length > 1)
        out.println("*** " + containers[i]);

    cont = containers[i];

    if (cont.getImages(db.getPipeline().createMask(db.getPipeline().getStatus("Trash.Split"))).length > 0)
        exit(cont + " has split images");

    images = cont.getImages();

    java.util.Arrays.sort(images);

    out.println("Checking XML Files");

    nameMapping = new java.util.LinkedHashMap();
    imagesToRename = new java.util.LinkedHashSet();
    rawFiles = new java.util.HashSet();
    imageMap = new java.util.HashMap();
    imageState = new java.util.HashMap();

    for (j = 0; j < images.length; j++) {
        image = images[j];
        name = image.getName();
        imageMap.put(name, image);
        imageState.put(name, image.getState());
        destName = images[images.length - j - 1].getName();
        nameMapping.put(name, destName);
    }

    for (j = 0; j < images.length; j++) {

        image = images[j];
        name = image.getName();

        page = image.getPageXML();

        rawFile = page.getRawFile();

        if (rawFile == null)
            exit(name + " does not reference a raw image");

        imagesToRename.add(name);
    }

    out.println("Converting raw files here:");

    paths = cont.getPaths();
    
    rawDir = paths.getTypeDir("raw");
    out.println(rawDir);

    deleteMethod = rawDir.getClass().getMethod("delete", java.lang.reflect.Array.newInstance(rawDir.getClass().getClass(), 0));

    raws = rawDir.listFiles();
    
    java.util.Arrays.sort(raws);

    failed = false;

    for (j = 0; j < raws.length; j++) {

        raw = raws[j];

        if (raw.isFile()) {

            var rawName = raw.getName();
            var newName = rawName + "_tmp";

            out.println("Ghostscripting " + rawName);

            cmd = "\"C:\\Program Files\\gs\\gs9.20\\bin\\gswin64c.exe\" -q -dPDF -dNOPAUSE -sProcessColorModel=DeviceRGB -dUseCropBox -r300x300 -sDEVICE=pdfwrite -sPDFACompatibilityPolicy=1 -sOutputFile=" + rawDir + "\\" + newName + " " + rawDir + "\\" + rawName + " -c quit";
            out.println("Running " + cmd);
            p = java.lang.Runtime.getRuntime().exec(cmd);
            p.waitFor();

            out.println("Renaming/Moving temp file " + rawName);

            newFile = new java.io.File(rawDir, newName);
            out.println("About to rename new file: " + newFile.getAbsolutePath());
            oldFile = new java.io.File(rawDir, rawName);
            oldFile.delete();
            var didRename = newFile.renameTo(oldFile);
            out.println("Did it rename? " + didRename);
            out.println("Renamed file: " + newFile.getName());
            
        }
    }

    if (failed)
        exit("Aborting prematurely due to rename failure(s)");
}
